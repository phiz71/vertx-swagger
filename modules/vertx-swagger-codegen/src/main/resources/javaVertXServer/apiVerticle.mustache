package {{package}};

import com.fasterxml.jackson.core.type.TypeReference;
import io.vertx.core.AbstractVerticle;
import io.vertx.core.eventbus.Message;
import io.vertx.core.eventbus.DeliveryOptions;
import io.vertx.core.json.Json;
import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;
import io.vertx.core.logging.Logger;
import io.vertx.core.logging.LoggerFactory;
import io.vertx.ext.auth.User;
import com.github.phiz71.vertx.swagger.router.SwaggerRouter;

{{#imports}}import {{import}};
{{/imports}}

import java.util.List;
import java.util.Map;

public class {{classname}}Verticle extends AbstractVerticle {
    final static Logger LOGGER = LoggerFactory.getLogger({{classname}}Verticle.class); 
    
    {{#operations}}{{#operation}}{{#vendorExtensions}}final static String {{x-serviceId-varName}} = "{{x-serviceId}}";
    {{/vendorExtensions}}{{/operation}}{{/operations}}

    protected {{classname}} service = createServiceImplementation();

    @Override
    public void start() throws Exception {
        {{#operations}}{{#operation}}
        //Consumer for {{#vendorExtensions}}{{x-serviceId}}{{/vendorExtensions}}
        vertx.eventBus().<JsonObject> consumer({{#vendorExtensions}}{{x-serviceId-varName}}{{/vendorExtensions}}).handler(message -> {
            try {
                {{#hasAuthMethods}}
                User user = SwaggerRouter.extractAuthUserFromMessage(message);
                {{/hasAuthMethods}}
                {{#hasParams}}
                    {{#allParams}}
                        {{#isListContainer}}
                {{{dataType}}} {{paramName}} = Json.mapper.readValue(message.body().getJsonArray("{{baseName}}").encode(), new TypeReference<{{{dataType}}}>(){});
                        {{/isListContainer}}
                        {{^isListContainer}}
                            {{#isPrimitiveType}}
                                {{#isString}}
                                    {{#vendorExtensions}}
                                        {{#X-isUUID}}
                                            {{#required}}
                {{{dataType}}} {{paramName}} = {{{dataType}}}.fromString(message.body().getString("{{baseName}}"));
                                            {{/required}}
                                            {{^required}}
                {{{dataType}}} {{paramName}} = null;
                if(message.body().getString("{{baseName}}") != null) {
                    {{paramName}} = {{{dataType}}}.fromString(message.body().getString("{{baseName}}"));
                }
                                            {{/required}}
                                        {{/X-isUUID}}
                                        {{^X-isUUID}}
                {{{dataType}}} {{paramName}} = message.body().getString("{{baseName}}");
                                        {{/X-isUUID}}
                                    {{/vendorExtensions}}
                                    {{^vendorExtensions}}
                {{{dataType}}} {{paramName}} = message.body().getString("{{baseName}}");
                                    {{/vendorExtensions}}
                                {{/isString}}
                                {{^isString}}
                                    {{#required}}
                {{{dataType}}} {{paramName}} = Json.mapper.readValue(message.body().getString("{{baseName}}"), {{{dataType}}}.class);
                                    {{/required}}
                                    {{^required}}
                {{{dataType}}} {{paramName}} = null;
                if(message.body().getString("{{baseName}}") != null) {
                    {{paramName}} = Json.mapper.readValue(message.body().getString("{{baseName}}"), {{{dataType}}}.class);
                }
                                    {{/required}}
                                {{/isString}}
                            {{/isPrimitiveType}}
                            {{^isPrimitiveType}}
                {{{dataType}}} {{paramName}} = Json.mapper.readValue(message.body().getJsonObject("{{baseName}}").encode(), {{{dataType}}}.class);
                            {{/isPrimitiveType}}
                        {{/isListContainer}}
                    {{/allParams}}
                {{/hasParams}}
                {{#rxInterface}}
{{>RxCall}}
                {{/rxInterface}}
                {{^rxInterface}}
{{>AsyncCall}}
                {{/rxInterface}}
            } catch (Exception e) {
                manageError(message, e, {{#vendorExtensions}}{{x-serviceId-varName}}{{/vendorExtensions}});
            }
        });
        {{/operation}}{{/operations}}
    }
    
    private void manageError(Message<JsonObject> message, Throwable cause, String serviceName) {
        int code = MainApiException.INTERNAL_SERVER_ERROR.getStatusCode();
        String statusMessage = MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage();
        DeliveryOptions deliveryOptions = new DeliveryOptions();
        if (cause instanceof MainApiException) {
            code = ((MainApiException)cause).getStatusCode();
            statusMessage = ((MainApiException)cause).getStatusMessage();
            deliveryOptions.setHeaders(((MainApiException)cause).getHeaders());
        } else {
            logUnexpectedError(serviceName, cause); 
        }
        deliveryOptions.addHeader(SwaggerRouter.CUSTOM_STATUS_CODE_HEADER_KEY, String.valueOf(code));
        deliveryOptions.addHeader(SwaggerRouter.CUSTOM_STATUS_MESSAGE_HEADER_KEY, statusMessage);

        message.reply(null, deliveryOptions);
    }
    
    private void logUnexpectedError(String serviceName, Throwable cause) {
        LOGGER.error("Unexpected error in "+ serviceName, cause);
    }

    protected {{classname}} createServiceImplementation() {
        return new {{classname}}Impl();
    }
}
